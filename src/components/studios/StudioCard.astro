---
const { title, description, image, tags, category, features, url, paid, price, slug } = Astro.props;

// Fallback image if the provided image fails to load
const fallbackImage = "/images/studios/placeholder.png";
---

<li 
  class="group rounded-2xl overflow-hidden shadow-box shadow-gray-500/20 transition-all duration-300 hover:shadow-none studio-card"
  data-title={title}
  data-description={description}
  data-tags={JSON.stringify(tags)}
  data-category={JSON.stringify(category)}
  data-features={JSON.stringify(features)}
  data-slug={slug}
>
  <a 
    href={`/studios/${slug}`} 
    title={title} 
    aria-label={title}
  >
    <div class="bg-white">
      <div class="relative flex items-end justify-center overflow-hidden border-b border-gray-100">
        {features && features.length > 0 && (
          <div class="absolute top-3 left-3 flex flex-wrap gap-1 z-10">
            {features.map((feature) => (
              <span class="px-2 py-1 text-xs font-medium text-white rounded-full bg-gradient-to-b from-blue-500 to-indigo-600">
                {feature}
              </span>
            ))}
          </div>
        )}
        <div 
          class="absolute top-3 right-3 z-10 hidden saved-indicator"
          data-slug={slug}
        >
          <svg 
            xmlns="http://www.w3.org/2000/svg" 
            width="16" 
            height="16" 
            viewBox="0 0 24 24" 
            fill="#FFD700" 
            stroke="#FFD700" 
            stroke-width="2" 
            stroke-linecap="round" 
            stroke-linejoin="round"
            class="drop-shadow-md"
          >
            <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
          </svg>
        </div>
        <img
          class="group-hover:scale-105 duration-300 aspect-[2/1] object-cover w-full"
          loading="lazy"
          src={image.url}
          alt={image.alt}
          width="560"
          onerror={`this.onerror=null; this.src='${fallbackImage}'`}
        />
      </div>

      <div class="p-4">
        {tags && tags.length > 0 && (
          <div class="flex flex-wrap gap-1">
            {tags.map((tag) => (
              <a 
                href={`/studios/tags/${tag}`}
                class="inline-flex items-center px-2 py-0.5 text-xs font-medium text-gray-600 transition-all rounded-full bg-gray-50 ring-1 ring-inset ring-gray-500/10 hover:text-blue-600"
                onclick="event.stopPropagation()"
              >
                {tag}
              </a>
            ))}
          </div>
        )}
        
        <h3 class="mt-3 text-lg font-semibold tracking-tight text-blue-950">
          {title}
        </h3>
        <p class="mt-1 text-sm text-gray-600 line-clamp-2">
          {description}
        </p>

        {category && (
          <div class="mt-2 flex items-center justify-between">
            <div class="flex gap-2">
              {category.map((cat) => (
                <a 
                  href={`/studios/categories/${cat}`}
                  class="text-xs font-mono uppercase text-blue-600 hover:text-blue-800"
                  onclick="event.stopPropagation()"
                >
                  {cat}
                </a>
              ))}
            </div>
            <span class="text-xs font-medium text-indigo-600">
             {price}
            </span>
          </div>
        )}
      </div>
    </div>
  </a>
</li>

<script>
  // Run once when component loads
  function checkSavedStatus() {
    const savedStudios = JSON.parse(localStorage.getItem('bookmarkedStudios') || '[]');
    const savedSlugs = new Set(savedStudios.map(studio => studio.slug));
    
    document.querySelectorAll('.saved-indicator').forEach(indicator => {
      const slug = indicator.getAttribute('data-slug');
      if (savedSlugs.has(slug)) {
        indicator.classList.remove('hidden');
      }
    });
  }

  // Check saved status on load
  document.addEventListener('DOMContentLoaded', checkSavedStatus);

  // Listen for changes to bookmarks
  window.addEventListener('storage', (e) => {
    if (e.key === 'bookmarkedStudios') {
      checkSavedStatus();
    }
  });
</script> 