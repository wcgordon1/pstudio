---
import { getCollection } from 'astro:content';
import BaseLayout from "@/layouts/BaseLayout.astro";
import CtaOne from "@/components/ctas/CtaOne.astro";
import { SocialShare } from "astro-social-share";

export async function getStaticPaths() {
  const studios = await getCollection('studios');
  return studios.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();
const fallbackImage = "/images/studios/placeholder.png";
---

<BaseLayout>
  <section>
    <div class="px-8 py-6 mx-auto md:px-12 lg:px-32 max-w-7xl lg:py-12">
      <div class="ring-gray-200/10 ring-1 p-2 rounded-3xl bg-gradient-to-t from-indigo-50 to-blue-50 max-w-3xl mx-auto">
        <div class="bg-white/90 backdrop-blur-2xl p-8 rounded-2xl shadow-xl ring-gray-200/20 ring-1">
          <div class="relative flex flex-col lg:flex-row justify-between w-full gap-12">
            <p 
              id="bookmarkBtn"
              class="absolute top-0 right-0 font-mono text-xs font-medium mt-0 mr-2 cursor-pointer transition-all duration-200 hover:text-blue-600"
              data-studio={JSON.stringify({
                slug: entry.slug,
                title: entry.data.title,
                description: entry.data.description,
                image: entry.data.image,
                tags: entry.data.tags,
                category: entry.data.category,
                features: entry.data.features,
                url: entry.data.url,
                paid: entry.data.paid,
                price: entry.data.price,
              })}
            >
              bookmark
            </p>

            <img
              class="lg:w-64 h-64 rounded-xl object-contain mt-6 md:h-64 lg:w-64 lg:h-64"
              src={entry.data.image.url}
              alt={entry.data.image.alt}
              onerror={`this.onerror=null; this.src='${fallbackImage}'`}
            />
            <div class="mt-4 flex-1">
              <div class="sm:inline-flex space-x-1 w-full">
                <p class="text-gray-600 text-xs">
                  Created by: {entry.data.author}
                <!-- 
                </p> 
                <span aria-hidden="true" class="text-gray-600">·</span>
                <div class="flex text-xs text-gray-600">
                  <time datetime={entry.data.pubDate.toISOString()}>
                    {entry.data.pubDate.toLocaleDateString()}
                  </time>
                </div>
                 -->
              </div>
              
              <h1 class="text-3xl font-semibold tracking-tight text-blue-950 mt-2">
                {entry.data.title}
              </h1>
              <p class="text-sm mt-2 text-blue-600 max-w-xl">
                <em>Starting at: {entry.data.price}</em>
              </p>

              <p class="text-sm mt-2 text-gray-600 max-w-xl">
                <em>{entry.data.description}</em>
              </p>

              <!-- Categories -->
              <div class="flex flex-wrap gap-2 mt-4">
                {entry.data.category.map((cat) => (
                  <a href={`/studios/categories/${cat}`}>
                    <span class="inline-flex items-center px-3 py-1 text-xs font-medium rounded-full cursor-pointer transition-all duration-200 text-gray-600 bg-gray-50 ring-1 ring-inset ring-gray-500/10 hover:text-blue-600">
                      {cat}
                    </span>
                  </a>
                ))}
              </div>

              <!-- Tags -->
              <ul class="flex flex-wrap gap-2 mt-4" role="list">
                {entry.data.tags.map((tag) => (
                  <a href={`/studios/tags/${tag}`}>
                    <span class="inline-flex items-center px-3 py-1 text-xs font-medium rounded-full cursor-pointer transition-all duration-200 text-gray-600 bg-gray-50 ring-1 ring-inset ring-gray-500/10 hover:text-blue-600">
                      {tag}
                    </span>
                  </a>
                ))}
              </ul>

              <!-- Features 
              <div class="flex flex-wrap gap-2 mt-4">
                {entry.data.features.map((feature) => (
                  <span class="inline-flex items-center px-3 py-1 text-xs font-medium text-white rounded-full bg-gradient-to-b from-blue-500 to-indigo-600">
                    {feature}
                  </span>
                ))}
              </div>
-->
              <!-- CTA Button -->
              <a
                href={entry.data.url}
                rel={entry.data.paid ? undefined : "nofollow"}
                target="_blank"
                class="inline-flex mt-6 items-center justify-center h-10 px-4 py-2 text-sm font-semibold text-white transition-all duration-200 rounded-full bg-gradient-to-b from-blue-500 to-indigo-600 hover:to-indigo-700 shadow-button shadow-blue-600/50 focus:ring-2 focus:ring-blue-950 focus:ring-offset-2 ring-offset-gray-200 hover:shadow-none md:w-full"
              >
                Visit {entry.data.title} →
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- Add Social Share Buttons -->
      <div class="prose prose-blue max-w-3xl mx-auto mt-4 mb-4">
        <div class="flex items-center justify-center gap-4">
            <p class="text-sm font-semibold tracking-tight text-blue-950">Share:</p>
          <!-- Twitter/X Share -->
          <a 
            href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(`Check out ${entry.data.title} - ${entry.data.description}`)}&url=${encodeURIComponent(`https://productized.studio/studios/${entry.slug}`)}`}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center justify-center h-10 w-10 text-gray-500 hover:text-blue-600 transition-colors duration-200"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 4l11.733 16h4.267l-11.733 -16z"/><path d="M4 20l6.768 -6.768m2.46 -2.46l6.772 -6.772"/></svg>
            <span class="sr-only">Share on X</span>
          </a>

          <!-- LinkedIn Share -->
          <a 
            href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(`https://productized.studio/studios/${entry.slug}`)}`}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center justify-center h-10 w-10 text-gray-500 hover:text-blue-600 transition-colors duration-200"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path><rect x="2" y="9" width="4" height="12"></rect><circle cx="4" cy="4" r="2"></circle></svg>
            <span class="sr-only">Share on LinkedIn</span>
          </a>

          <!-- Facebook Share -->
          <a 
            href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(`https://productized.studio/studios/${entry.slug}`)}`}
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center justify-center h-10 w-10 text-gray-500 hover:text-blue-600 transition-colors duration-200"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path></svg>
            <span class="sr-only">Share on Facebook</span>
          </a>

          <!-- Email Share -->
          <a 
            href={`mailto:example@example.com?subject=${encodeURIComponent(`Check out ${entry.data.title} on Productized Studio`)}&body=${encodeURIComponent(`I found this great studio on Productized Studio: https://productized.studio/studios/${entry.slug}`)}`}
            class="inline-flex items-center justify-center h-10 w-10 text-gray-500 hover:text-blue-600 transition-colors duration-200"
          >
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22,6 12,13 2,6"></polyline></svg>
            <span class="sr-only">Share via Email</span>
          </a>
        </div>
      </div>

      <!-- Content -->
      <div class="prose prose-blue max-w-3xl mx-auto mt-2">
        <Content />
      </div>
      <div class="max-w-3xl mx-auto mt-12">
        <div class="flex flex-wrap items-center gap-2 mt-10">
            <a
              href="/studios"
              title="Sponsor Productized Studio"
              aria-label="Sponsor Productized Studio"
              class="flex items-center justify-center h-10 px-4 py-2 text-sm font-semibold text-gray-500 transition-all duration-200 bg-white border border-gray-300 rounded-full hover:text-blue-700 focus:ring-2 shadow-button shadow-gray-500/5 focus:ring-blue-950 focus:ring-offset-2 ring-offset-gray-200 hover:shadow-none"
              >↩ Directory</a
            >
            <a
              href="/studios"
              title="Productized Studios Directory"
              aria-label="Productized Studios Directory"
              class="flex items-center justify-center h-10 px-4 py-2 text-sm font-semibold text-white transition-all duration-200 rounded-full bg-gradient-to-b from-blue-500 to-indigo-600 hover:to-indigo-700 shadow-button shadow-blue-600/50 focus:ring-2 focus:ring-blue-950 focus:ring-offset-2 ring-offset-gray-200 hover:shadow-none"
              >Check out {entry.data.title} →</a
            >
          </div>
      </div>
    </div>
  </section>
  <CtaOne />
</BaseLayout> 

<script>
  const bookmarkBtn = document.getElementById('bookmarkBtn');
  
  function isBookmarked(slug) {
    const bookmarks = JSON.parse(localStorage.getItem('bookmarkedStudios') || '[]');
    return bookmarks.some(studio => studio.slug === slug);
  }

  function toggleBookmark(studioData) {
    let bookmarks = JSON.parse(localStorage.getItem('bookmarkedStudios') || '[]');
    const studioExists = bookmarks.some(studio => studio.slug === studioData.slug);

    if (studioExists) {
      // Remove bookmark
      bookmarks = bookmarks.filter(studio => studio.slug !== studioData.slug);
      bookmarkBtn.classList.remove('text-blue-600');
      bookmarkBtn.textContent = 'bookmark';
    } else {
      // Add bookmark
      bookmarks.push(studioData);
      bookmarkBtn.classList.add('text-blue-600');
      bookmarkBtn.textContent = 'Saved!';
    }

    localStorage.setItem('bookmarkedStudios', JSON.stringify(bookmarks));
  }

  // Initialize bookmark state
  if (bookmarkBtn) {
    const studioData = JSON.parse(bookmarkBtn.dataset.studio);
    if (isBookmarked(studioData.slug)) {
      bookmarkBtn.classList.add('text-blue-600');
      bookmarkBtn.textContent = 'Saved!';
    }

    // Add click handler
    bookmarkBtn.addEventListener('click', () => {
      toggleBookmark(studioData);
    });
  }
</script> 